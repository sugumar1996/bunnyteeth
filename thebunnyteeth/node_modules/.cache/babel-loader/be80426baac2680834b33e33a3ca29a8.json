{"ast":null,"code":"var storage = {\n  set: function set(key, value) {\n    if (typeof value === 'object' || Array.isArray(value) || Number.isInteger(value) || isNaN(value)) {\n      value = JSON.stringify(value);\n    }\n\n    localStorage.setItem(key, value);\n  },\n  get: function get(key, defaultValue) {\n    var data = localStorage.getItem(key);\n\n    try {\n      var parsed = JSON.parse(data);\n      return parsed !== null ? parsed : defaultValue;\n    } catch (e) {\n      return data !== null ? data : defaultValue;\n    }\n  },\n  remove: function remove(key) {\n    return localStorage.removeItem(key);\n  },\n  clear: function clear() {\n    return localStorage.clear();\n  }\n};\nexport default storage;","map":{"version":3,"sources":["/home/bitcot/Desktop/my-repo/bunnyteeth/thebunnyteeth/src/utility/storage.js"],"names":["storage","set","key","value","Array","isArray","Number","isInteger","isNaN","JSON","stringify","localStorage","setItem","get","defaultValue","data","getItem","parsed","parse","e","remove","removeItem","clear"],"mappings":"AAAA,IAAMA,OAAO,GAAG;AACZC,EAAAA,GADY,eACPC,GADO,EACFC,KADE,EACK;AACb,QAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BC,KAAK,CAACC,OAAN,CAAcF,KAAd,CAA7B,IAAqDG,MAAM,CAACC,SAAP,CAAiBJ,KAAjB,CAArD,IAAgFK,KAAK,CAACL,KAAD,CAAzF,EAAkG;AAC9FA,MAAAA,KAAK,GAAGM,IAAI,CAACC,SAAL,CAAeP,KAAf,CAAR;AACH;;AAEDQ,IAAAA,YAAY,CAACC,OAAb,CAAqBV,GAArB,EAA0BC,KAA1B;AACH,GAPW;AAQZU,EAAAA,GARY,eAQPX,GARO,EAQFY,YARE,EAQY;AACpB,QAAMC,IAAI,GAAGJ,YAAY,CAACK,OAAb,CAAqBd,GAArB,CAAb;;AAEA,QAAI;AACA,UAAIe,MAAM,GAAGR,IAAI,CAACS,KAAL,CAAWH,IAAX,CAAb;AAEA,aAAOE,MAAM,KAAK,IAAX,GAAkBA,MAAlB,GAA2BH,YAAlC;AACH,KAJD,CAIE,OAAMK,CAAN,EAAS;AAEP,aAAOJ,IAAI,KAAK,IAAT,GAAgBA,IAAhB,GAAuBD,YAA9B;AACH;AACJ,GAnBW;AAoBZM,EAAAA,MApBY,kBAoBJlB,GApBI,EAoBC;AACT,WAAOS,YAAY,CAACU,UAAb,CAAwBnB,GAAxB,CAAP;AACH,GAtBW;AAuBZoB,EAAAA,KAvBY,mBAuBH;AACL,WAAOX,YAAY,CAACW,KAAb,EAAP;AACH;AAzBW,CAAhB;AA4BA,eAAetB,OAAf","sourcesContent":["const storage = {\n    set (key, value) {\n        if (typeof value === 'object' || Array.isArray(value) || Number.isInteger(value) || isNaN(value)) {\n            value = JSON.stringify(value);\n        }\n\n        localStorage.setItem(key, value);\n    },\n    get (key, defaultValue) {\n        const data = localStorage.getItem(key);\n\n        try {\n            let parsed = JSON.parse(data);\n\n            return parsed !== null ? parsed : defaultValue;\n        } catch(e) {\n\n            return data !== null ? data : defaultValue;\n        }\n    },\n    remove (key) {\n        return localStorage.removeItem(key);\n    },\n    clear () {\n        return localStorage.clear();\n    }\n};\n\nexport default storage;"]},"metadata":{},"sourceType":"module"}