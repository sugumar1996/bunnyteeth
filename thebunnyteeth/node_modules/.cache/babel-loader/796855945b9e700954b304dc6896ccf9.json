{"ast":null,"code":"var types = {};\nvar config = {\n  checkExisting: true\n};\nexport function add(name) {\n  types[name] = true;\n}\nexport function remove(name) {\n  types[name] = false;\n}\nexport function has(name) {\n  return !!types[name];\n}\nexport function check(name) {\n  if (config.checkExisting && has(name)) {\n    throw new TypeError(\"Duplicate action type: \".concat(name));\n  }\n}\nexport function all() {\n  return Object.keys(types).filter(has);\n}\nexport function clear() {\n  all().forEach(remove);\n}\nexport function enableChecking() {\n  config.checkExisting = true;\n}\nexport function disableChecking() {\n  config.checkExisting = false;\n}","map":{"version":3,"sources":["/home/bitcot/Desktop/my-repo/bunnyteeth/thebunnyteeth/node_modules/redux-act/esm/types.js"],"names":["types","config","checkExisting","add","name","remove","has","check","TypeError","concat","all","Object","keys","filter","clear","forEach","enableChecking","disableChecking"],"mappings":"AAAA,IAAIA,KAAK,GAAG,EAAZ;AACA,IAAIC,MAAM,GAAG;AACXC,EAAAA,aAAa,EAAE;AADJ,CAAb;AAGA,OAAO,SAASC,GAAT,CAAaC,IAAb,EAAmB;AACxBJ,EAAAA,KAAK,CAACI,IAAD,CAAL,GAAc,IAAd;AACD;AACD,OAAO,SAASC,MAAT,CAAgBD,IAAhB,EAAsB;AAC3BJ,EAAAA,KAAK,CAACI,IAAD,CAAL,GAAc,KAAd;AACD;AACD,OAAO,SAASE,GAAT,CAAaF,IAAb,EAAmB;AACxB,SAAO,CAAC,CAACJ,KAAK,CAACI,IAAD,CAAd;AACD;AACD,OAAO,SAASG,KAAT,CAAeH,IAAf,EAAqB;AAC1B,MAAIH,MAAM,CAACC,aAAP,IAAwBI,GAAG,CAACF,IAAD,CAA/B,EAAuC;AACrC,UAAM,IAAII,SAAJ,CAAc,0BAA0BC,MAA1B,CAAiCL,IAAjC,CAAd,CAAN;AACD;AACF;AACD,OAAO,SAASM,GAAT,GAAe;AACpB,SAAOC,MAAM,CAACC,IAAP,CAAYZ,KAAZ,EAAmBa,MAAnB,CAA0BP,GAA1B,CAAP;AACD;AACD,OAAO,SAASQ,KAAT,GAAiB;AACtBJ,EAAAA,GAAG,GAAGK,OAAN,CAAcV,MAAd;AACD;AACD,OAAO,SAASW,cAAT,GAA0B;AAC/Bf,EAAAA,MAAM,CAACC,aAAP,GAAuB,IAAvB;AACD;AACD,OAAO,SAASe,eAAT,GAA2B;AAChChB,EAAAA,MAAM,CAACC,aAAP,GAAuB,KAAvB;AACD","sourcesContent":["var types = {};\nvar config = {\n  checkExisting: true\n};\nexport function add(name) {\n  types[name] = true;\n}\nexport function remove(name) {\n  types[name] = false;\n}\nexport function has(name) {\n  return !!types[name];\n}\nexport function check(name) {\n  if (config.checkExisting && has(name)) {\n    throw new TypeError(\"Duplicate action type: \".concat(name));\n  }\n}\nexport function all() {\n  return Object.keys(types).filter(has);\n}\nexport function clear() {\n  all().forEach(remove);\n}\nexport function enableChecking() {\n  config.checkExisting = true;\n}\nexport function disableChecking() {\n  config.checkExisting = false;\n}"]},"metadata":{},"sourceType":"module"}