{"ast":null,"code":"import _objectSpread from \"/home/bitcot/Desktop/my-repo/bunnyteeth/thebunnyteeth/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { createReducer } from 'redux-act';\nimport storage from 'utility/storage';\nimport * as actions from '../actions/auth/index';\nimport { ActionTypes } from '../../../src/redux/reducers/actionType';\nvar user = storage.get('user', null);\nvar token = storage.get('token', null);\nvar refresh_token = storage.get('refresh_token', null);\nexport var initialState = {\n  token: token,\n  refresh_token: refresh_token,\n  user: user,\n  isLoading: false,\n  singlePostData: [],\n  categories: [],\n  data: [],\n  categories_list: []\n};\n\nvar updateObject = function updateObject(oldState, updatedProps) {\n  return _objectSpread(_objectSpread({}, oldState), updatedProps);\n};\n\nexport var authReducer = function authReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ActionTypes.SINGLE_POST_PENDING:\n      return updateObject(state, {\n        isLoading: true,\n        data: {}\n      });\n\n    case ActionTypes.SINGLE_POST_FULFILLED:\n      return updateObject(state, {\n        isLoading: false,\n        data: action.payload\n      });\n\n    case ActionTypes.GET_ALL_CATEGORIES_PENDING:\n      return updateObject(state, {\n        isLoading: true\n      });\n\n    case ActionTypes.GET_ALL_CATEGORIES_FULFILLED:\n      return updateObject(state, {\n        isLoading: false,\n        categories_list: action.payload\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/home/bitcot/Desktop/my-repo/bunnyteeth/thebunnyteeth/src/redux/reducers/authReducer.js"],"names":["createReducer","storage","actions","ActionTypes","user","get","token","refresh_token","initialState","isLoading","singlePostData","categories","data","categories_list","updateObject","oldState","updatedProps","authReducer","state","action","type","SINGLE_POST_PENDING","SINGLE_POST_FULFILLED","payload","GET_ALL_CATEGORIES_PENDING","GET_ALL_CATEGORIES_FULFILLED"],"mappings":";AAAA,SAASA,aAAT,QAA8B,WAA9B;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,OAAO,KAAKC,OAAZ,MAAyB,uBAAzB;AACA,SAASC,WAAT,QAA4B,wCAA5B;AAEA,IAAMC,IAAI,GAAGH,OAAO,CAACI,GAAR,CAAY,MAAZ,EAAoB,IAApB,CAAb;AACA,IAAMC,KAAK,GAAGL,OAAO,CAACI,GAAR,CAAY,OAAZ,EAAqB,IAArB,CAAd;AACA,IAAME,aAAa,GAAGN,OAAO,CAACI,GAAR,CAAY,eAAZ,EAA6B,IAA7B,CAAtB;AAEA,OAAO,IAAMG,YAAY,GAAG;AACxBF,EAAAA,KAAK,EAAEA,KADiB;AAExBC,EAAAA,aAAa,EAAEA,aAFS;AAGxBH,EAAAA,IAAI,EAAEA,IAHkB;AAIxBK,EAAAA,SAAS,EAAE,KAJa;AAKxBC,EAAAA,cAAc,EAAE,EALQ;AAMxBC,EAAAA,UAAU,EAAE,EANY;AAOxBC,EAAAA,IAAI,EAAE,EAPkB;AAQxBC,EAAAA,eAAe,EAAE;AARO,CAArB;;AAYP,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,QAAD,EAAWC,YAAX,EAA4B;AAC7C,yCACOD,QADP,GAEOC,YAFP;AAIH,CALD;;AAOA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBV,YAAyB;AAAA,MAAXW,MAAW;;AACzD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKjB,WAAW,CAACkB,mBAAjB;AACI,aAAOP,YAAY,CAACI,KAAD,EAAQ;AAAET,QAAAA,SAAS,EAAE,IAAb;AAAmBG,QAAAA,IAAI,EAAE;AAAzB,OAAR,CAAnB;;AACJ,SAAKT,WAAW,CAACmB,qBAAjB;AACI,aAAOR,YAAY,CAACI,KAAD,EAAQ;AAAET,QAAAA,SAAS,EAAE,KAAb;AAAoBG,QAAAA,IAAI,EAAEO,MAAM,CAACI;AAAjC,OAAR,CAAnB;;AAEJ,SAAKpB,WAAW,CAACqB,0BAAjB;AACI,aAAOV,YAAY,CAACI,KAAD,EAAQ;AAAET,QAAAA,SAAS,EAAE;AAAb,OAAR,CAAnB;;AACJ,SAAKN,WAAW,CAACsB,4BAAjB;AACI,aAAOX,YAAY,CAACI,KAAD,EAAQ;AAAET,QAAAA,SAAS,EAAE,KAAb;AAAoBI,QAAAA,eAAe,EAAEM,MAAM,CAACI;AAA5C,OAAR,CAAnB;;AACJ;AAAS,aAAOL,KAAP;AAVb;AAYH,CAbM","sourcesContent":["import { createReducer } from 'redux-act';\nimport storage from 'utility/storage';\nimport * as actions from '../actions/auth/index'\nimport { ActionTypes } from '../../../src/redux/reducers/actionType';\n\nconst user = storage.get('user', null)\nconst token = storage.get('token', null)\nconst refresh_token = storage.get('refresh_token', null)\n\nexport const initialState = {\n    token: token,\n    refresh_token: refresh_token,\n    user: user,\n    isLoading: false,\n    singlePostData: [],\n    categories: [],\n    data: [],\n    categories_list: [],\n\n}\n\nconst updateObject = (oldState, updatedProps) => {\n    return {\n        ...oldState,\n        ...updatedProps\n    }\n}\n\nexport const authReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case ActionTypes.SINGLE_POST_PENDING:\n            return updateObject(state, { isLoading: true, data: {} })\n        case ActionTypes.SINGLE_POST_FULFILLED: \n            return updateObject(state, { isLoading: false, data: action.payload })\n\n        case ActionTypes.GET_ALL_CATEGORIES_PENDING:\n            return updateObject(state, { isLoading: true })\n        case ActionTypes.GET_ALL_CATEGORIES_FULFILLED: \n            return updateObject(state, { isLoading: false, categories_list: action.payload})\n        default: return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}