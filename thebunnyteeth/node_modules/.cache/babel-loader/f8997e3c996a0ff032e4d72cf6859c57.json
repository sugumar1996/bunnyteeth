{"ast":null,"code":"import jwtDecode from 'jwt-decode';\nimport { store } from 'react-notifications-component';\nimport { BehaviorSubject } from \"rx\";\nexport var isLoading = new BehaviorSubject(false);\nexport var isDialogOpen = new BehaviorSubject(false);\nexport var baseImagePath = function baseImagePath(path_url) {\n  return require(\"../assets/images/\".concat(path_url));\n};\nexport var isTokenValid = function isTokenValid(token) {\n  var data = jwtDecode(token);\n  var Valid = true;\n\n  if (new Date() < new Date(parseInt(data.exp * 1000))) {\n    Valid = true;\n  } else {\n    Valid = false;\n  }\n\n  return Valid;\n}; // for production removing console logs\n\nexport var removeConsoleLog = function removeConsoleLog() {\n  function emptyfunc() {}\n\n  console.log = emptyfunc;\n  console.warn = emptyfunc;\n  console.error = emptyfunc;\n};\nexport var toastMsg = function toastMsg(msg) {\n  var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var autoClose = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2000;\n\n  if (error) {\n    store.addNotification({\n      title: \"Error\",\n      message: msg,\n      type: \"danger\",\n      insert: \"top\",\n      container: \"top-right\",\n      animationIn: [\"animated\", \"fadeIn\"],\n      animationOut: [\"animated\", \"fadeOut\"],\n      dismiss: {\n        duration: autoClose,\n        //   onScreen: true,\n        showIcon: true\n      }\n    });\n  } else {\n    store.addNotification({\n      title: \"Success\",\n      message: msg,\n      type: \"success\",\n      insert: \"top\",\n      container: \"top-right\",\n      animationIn: [\"animated\", \"fadeIn\"],\n      animationOut: [\"animated\", \"fadeOut\"],\n      dismiss: {\n        duration: autoClose,\n        //   onScreen: true,\n        showIcon: true\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/home/bitcot/Desktop/my-repo/bunnyteeth/thebunnyteeth/src/utility/utility.js"],"names":["jwtDecode","store","BehaviorSubject","isLoading","isDialogOpen","baseImagePath","path_url","require","isTokenValid","token","data","Valid","Date","parseInt","exp","removeConsoleLog","emptyfunc","console","log","warn","error","toastMsg","msg","autoClose","addNotification","title","message","type","insert","container","animationIn","animationOut","dismiss","duration","showIcon"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,KAAT,QAAsB,+BAAtB;AACA,SAASC,eAAT,QAAgC,IAAhC;AAEA,OAAO,IAAMC,SAAS,GAAG,IAAID,eAAJ,CAAoB,KAApB,CAAlB;AAEP,OAAO,IAAME,YAAY,GAAG,IAAIF,eAAJ,CAAoB,KAApB,CAArB;AAEP,OAAO,IAAMG,aAAa,GAAG,SAAhBA,aAAgB,CAACC,QAAD,EAAc;AACvC,SAAOC,OAAO,4BAAqBD,QAArB,EAAd;AACH,CAFM;AAIP,OAAO,IAAME,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAW;AACnC,MAAMC,IAAI,GAAGV,SAAS,CAACS,KAAD,CAAtB;AACA,MAAIE,KAAK,GAAG,IAAZ;;AAEA,MAAI,IAAIC,IAAJ,KAAa,IAAIA,IAAJ,CAASC,QAAQ,CAACH,IAAI,CAACI,GAAL,GAAW,IAAZ,CAAjB,CAAjB,EAAsD;AAClDH,IAAAA,KAAK,GAAG,IAAR;AACH,GAFD,MAEO;AACHA,IAAAA,KAAK,GAAG,KAAR;AACH;;AACD,SAAOA,KAAP;AACH,CAVM,C,CAYP;;AACA,OAAO,IAAMI,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAClC,WAASC,SAAT,GAAqB,CAAG;;AACxBC,EAAAA,OAAO,CAACC,GAAR,GAAcF,SAAd;AACAC,EAAAA,OAAO,CAACE,IAAR,GAAeH,SAAf;AACAC,EAAAA,OAAO,CAACG,KAAR,GAAgBJ,SAAhB;AACH,CALM;AAOP,OAAO,IAAMK,QAAQ,GAAG,SAAXA,QAAW,CAACC,GAAD,EAA0C;AAAA,MAApCF,KAAoC,uEAA5B,KAA4B;AAAA,MAArBG,SAAqB,uEAAT,IAAS;;AAC9D,MAAIH,KAAJ,EAAW;AACPnB,IAAAA,KAAK,CAACuB,eAAN,CAAsB;AAClBC,MAAAA,KAAK,EAAE,OADW;AAElBC,MAAAA,OAAO,EAAEJ,GAFS;AAGlBK,MAAAA,IAAI,EAAE,QAHY;AAIlBC,MAAAA,MAAM,EAAE,KAJU;AAKlBC,MAAAA,SAAS,EAAE,WALO;AAMlBC,MAAAA,WAAW,EAAE,CAAC,UAAD,EAAa,QAAb,CANK;AAOlBC,MAAAA,YAAY,EAAE,CAAC,UAAD,EAAa,SAAb,CAPI;AAQlBC,MAAAA,OAAO,EAAE;AACLC,QAAAA,QAAQ,EAAEV,SADL;AAEL;AACAW,QAAAA,QAAQ,EAAE;AAHL;AARS,KAAtB;AAcH,GAfD,MAeO;AACHjC,IAAAA,KAAK,CAACuB,eAAN,CAAsB;AAClBC,MAAAA,KAAK,EAAE,SADW;AAElBC,MAAAA,OAAO,EAAEJ,GAFS;AAGlBK,MAAAA,IAAI,EAAE,SAHY;AAIlBC,MAAAA,MAAM,EAAE,KAJU;AAKlBC,MAAAA,SAAS,EAAE,WALO;AAMlBC,MAAAA,WAAW,EAAE,CAAC,UAAD,EAAa,QAAb,CANK;AAOlBC,MAAAA,YAAY,EAAE,CAAC,UAAD,EAAa,SAAb,CAPI;AAQlBC,MAAAA,OAAO,EAAE;AACLC,QAAAA,QAAQ,EAAEV,SADL;AAEL;AACAW,QAAAA,QAAQ,EAAE;AAHL;AARS,KAAtB;AAcH;AACJ,CAhCM","sourcesContent":["import jwtDecode from 'jwt-decode';\nimport { store } from 'react-notifications-component';\nimport { BehaviorSubject } from \"rx\";\n\nexport const isLoading = new BehaviorSubject(false);\n\nexport const isDialogOpen = new BehaviorSubject(false);\n\nexport const baseImagePath = (path_url) => {\n    return require(`../assets/images/${path_url}`)\n}\n\nexport const isTokenValid = (token) => {\n    const data = jwtDecode(token);\n    let Valid = true;\n\n    if (new Date() < new Date(parseInt(data.exp * 1000))) {\n        Valid = true;\n    } else {\n        Valid = false\n    }\n    return Valid;\n}\n\n// for production removing console logs\nexport const removeConsoleLog = () => {\n    function emptyfunc() { }\n    console.log = emptyfunc;\n    console.warn = emptyfunc;\n    console.error = emptyfunc;\n}\n\nexport const toastMsg = (msg, error = false, autoClose = 2000) => {\n    if (error) {\n        store.addNotification({\n            title: \"Error\",\n            message: msg,\n            type: \"danger\",\n            insert: \"top\",\n            container: \"top-right\",\n            animationIn: [\"animated\", \"fadeIn\"],\n            animationOut: [\"animated\", \"fadeOut\"],\n            dismiss: {\n                duration: autoClose,\n                //   onScreen: true,\n                showIcon: true\n            }\n        });\n    } else {\n        store.addNotification({\n            title: \"Success\",\n            message: msg,\n            type: \"success\",\n            insert: \"top\",\n            container: \"top-right\",\n            animationIn: [\"animated\", \"fadeIn\"],\n            animationOut: [\"animated\", \"fadeOut\"],\n            dismiss: {\n                duration: autoClose,\n                //   onScreen: true,\n                showIcon: true\n            }\n        });\n    }\n}"]},"metadata":{},"sourceType":"module"}