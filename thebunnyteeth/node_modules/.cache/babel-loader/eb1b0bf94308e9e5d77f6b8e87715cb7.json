{"ast":null,"code":"import batch from '../batch';\nvar batchType = batch.getType();\nexport function actionTransformer(action) {\n  if (action && action.type === batchType) {\n    action.payload.type = batchType;\n    return action.payload;\n  }\n\n  return action;\n}\nexport var logger = {};\n\nvar _loop = function _loop(level) {\n  if (typeof console[level] === 'function') {\n    logger[level] = function levelFn() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var lastArg = args.pop();\n\n      if (Array.isArray(lastArg) && lastArg.type === batchType) {\n        lastArg.forEach(function (action) {\n          console[level].apply(console, [].concat(args, [action]));\n        });\n      } else {\n        args.push(lastArg);\n        console[level].apply(console, args);\n      }\n    };\n  }\n};\n\nfor (var level in console) {\n  _loop(level);\n}","map":{"version":3,"sources":["/home/bitcot/Desktop/my-repo/bunnyteeth/thebunnyteeth/node_modules/redux-act/esm/loggers/reduxLogger.js"],"names":["batch","batchType","getType","actionTransformer","action","type","payload","logger","_loop","level","console","levelFn","_len","arguments","length","args","Array","_key","lastArg","pop","isArray","forEach","apply","concat","push"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,IAAIC,SAAS,GAAGD,KAAK,CAACE,OAAN,EAAhB;AACA,OAAO,SAASC,iBAAT,CAA2BC,MAA3B,EAAmC;AACxC,MAAIA,MAAM,IAAIA,MAAM,CAACC,IAAP,KAAgBJ,SAA9B,EAAyC;AACvCG,IAAAA,MAAM,CAACE,OAAP,CAAeD,IAAf,GAAsBJ,SAAtB;AACA,WAAOG,MAAM,CAACE,OAAd;AACD;;AAED,SAAOF,MAAP;AACD;AACD,OAAO,IAAIG,MAAM,GAAG,EAAb;;AAEP,IAAIC,KAAK,GAAG,SAASA,KAAT,CAAeC,KAAf,EAAsB;AAChC,MAAI,OAAOC,OAAO,CAACD,KAAD,CAAd,KAA0B,UAA9B,EAA0C;AACxCF,IAAAA,MAAM,CAACE,KAAD,CAAN,GAAgB,SAASE,OAAT,GAAmB;AACjC,WAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,IAAI,GAAG,IAAIC,KAAJ,CAAUJ,IAAV,CAApC,EAAqDK,IAAI,GAAG,CAAjE,EAAoEA,IAAI,GAAGL,IAA3E,EAAiFK,IAAI,EAArF,EAAyF;AACvFF,QAAAA,IAAI,CAACE,IAAD,CAAJ,GAAaJ,SAAS,CAACI,IAAD,CAAtB;AACD;;AAED,UAAIC,OAAO,GAAGH,IAAI,CAACI,GAAL,EAAd;;AAEA,UAAIH,KAAK,CAACI,OAAN,CAAcF,OAAd,KAA0BA,OAAO,CAACb,IAAR,KAAiBJ,SAA/C,EAA0D;AACxDiB,QAAAA,OAAO,CAACG,OAAR,CAAgB,UAAUjB,MAAV,EAAkB;AAChCM,UAAAA,OAAO,CAACD,KAAD,CAAP,CAAea,KAAf,CAAqBZ,OAArB,EAA8B,GAAGa,MAAH,CAAUR,IAAV,EAAgB,CAACX,MAAD,CAAhB,CAA9B;AACD,SAFD;AAGD,OAJD,MAIO;AACLW,QAAAA,IAAI,CAACS,IAAL,CAAUN,OAAV;AACAR,QAAAA,OAAO,CAACD,KAAD,CAAP,CAAea,KAAf,CAAqBZ,OAArB,EAA8BK,IAA9B;AACD;AACF,KAfD;AAgBD;AACF,CAnBD;;AAqBA,KAAK,IAAIN,KAAT,IAAkBC,OAAlB,EAA2B;AACzBF,EAAAA,KAAK,CAACC,KAAD,CAAL;AACD","sourcesContent":["import batch from '../batch';\nvar batchType = batch.getType();\nexport function actionTransformer(action) {\n  if (action && action.type === batchType) {\n    action.payload.type = batchType;\n    return action.payload;\n  }\n\n  return action;\n}\nexport var logger = {};\n\nvar _loop = function _loop(level) {\n  if (typeof console[level] === 'function') {\n    logger[level] = function levelFn() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var lastArg = args.pop();\n\n      if (Array.isArray(lastArg) && lastArg.type === batchType) {\n        lastArg.forEach(function (action) {\n          console[level].apply(console, [].concat(args, [action]));\n        });\n      } else {\n        args.push(lastArg);\n        console[level].apply(console, args);\n      }\n    };\n  }\n};\n\nfor (var level in console) {\n  _loop(level);\n}"]},"metadata":{},"sourceType":"module"}