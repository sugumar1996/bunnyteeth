{"ast":null,"code":"import _regeneratorRuntime from \"/home/bitcot/Desktop/my-repo/bunnyteeth/thebunnyteeth/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/bitcot/Desktop/my-repo/bunnyteeth/thebunnyteeth/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios'; //import Axios from '../../config';\n//import * as AuthActions from \"../../redux/actions/index\";\n\nimport { toastMsg } from '../utility';\nimport * as commonService from '../utility';\n\nvar handleAuthentication = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(error) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function handleAuthentication(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default function errorHandler(error) {\n  commonService.isLoading.onNext(false);\n\n  if (axios.isCancel(error)) {\n    return Promise.reject(error);\n  }\n\n  if (error.message === \"Network Error\") {\n    toastMsg('Error connecting server. Please check your internet connection.', true);\n    return Promise.reject(error.message);\n  }\n\n  var message = error.response && error.response.data.error ? error.response.data.error.message : error.response.data.message ? error.response.data.message : 'Seems like something went wrong!';\n\n  switch (error.response.status) {\n    case 400:\n      if (message === \"jwt expired\") handleAuthentication(error);else if (message && message.toLowerCase() === \"unauthorized\") {\n        // AuthActions.logout();\n        toastMsg(message, true);\n      } else {\n        toastMsg(message, true);\n      }\n      break;\n\n    case 401:\n      if (message === \"jwt expired\") {\n        return handleAuthentication(error);\n      } else toastMsg(message, true);\n\n      console.log('unauthorized, logging out ...');\n      break;\n\n    case 500:\n      toastMsg(message, true);\n      break;\n\n    case 504:\n      toastMsg('Sorry, could not access the external resource to refine the data for your request, please try again later!', true);\n      break;\n\n    case 700:\n      toastMsg(message, true);\n      break;\n\n    case 704:\n      toastMsg(message, true);\n      break;\n\n    default:\n      // toastMsg(message ? message : 'Something went wrong', true);\n      break;\n  }\n\n  return Promise.reject(error.response);\n}","map":{"version":3,"sources":["/home/bitcot/Desktop/my-repo/bunnyteeth/thebunnyteeth/src/utility/errorHandler/errorHandler.js"],"names":["axios","toastMsg","commonService","handleAuthentication","error","errorHandler","isLoading","onNext","isCancel","Promise","reject","message","response","data","status","toLowerCase","console","log"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;AACA;;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,OAAO,KAAKC,aAAZ,MAA+B,YAA/B;;AAEA,IAAMC,oBAAoB;AAAA,sEAAG,iBAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAApBD,oBAAoB;AAAA;AAAA;AAAA,GAA1B;;AAUA,eAAe,SAASE,YAAT,CAAsBD,KAAtB,EAA6B;AACxCF,EAAAA,aAAa,CAACI,SAAd,CAAwBC,MAAxB,CAA+B,KAA/B;;AACA,MAAIP,KAAK,CAACQ,QAAN,CAAeJ,KAAf,CAAJ,EAA2B;AACvB,WAAOK,OAAO,CAACC,MAAR,CAAeN,KAAf,CAAP;AACH;;AAED,MAAIA,KAAK,CAACO,OAAN,KAAkB,eAAtB,EAAuC;AACnCV,IAAAA,QAAQ,CAAC,iEAAD,EAAoE,IAApE,CAAR;AACA,WAAOQ,OAAO,CAACC,MAAR,CAAeN,KAAK,CAACO,OAArB,CAAP;AACH;;AAED,MAAMA,OAAO,GAAGP,KAAK,CAACQ,QAAN,IAAkBR,KAAK,CAACQ,QAAN,CAAeC,IAAf,CAAoBT,KAAtC,GAA8CA,KAAK,CAACQ,QAAN,CAAeC,IAAf,CAAoBT,KAApB,CAA0BO,OAAxE,GAAkFP,KAAK,CAACQ,QAAN,CAAeC,IAAf,CAAoBF,OAApB,GAA8BP,KAAK,CAACQ,QAAN,CAAeC,IAAf,CAAoBF,OAAlD,GAA4D,kCAA9J;;AACA,UAAQP,KAAK,CAACQ,QAAN,CAAeE,MAAvB;AACI,SAAK,GAAL;AACI,UAAIH,OAAO,KAAK,aAAhB,EAA+BR,oBAAoB,CAACC,KAAD,CAApB,CAA/B,KACK,IAAIO,OAAO,IAAIA,OAAO,CAACI,WAAR,OAA0B,cAAzC,EAAyD;AAC1D;AACAd,QAAAA,QAAQ,CAACU,OAAD,EAAU,IAAV,CAAR;AACH,OAHI,MAGE;AACHV,QAAAA,QAAQ,CAACU,OAAD,EAAU,IAAV,CAAR;AACH;AACD;;AACJ,SAAK,GAAL;AACI,UAAIA,OAAO,KAAK,aAAhB,EAA+B;AAC3B,eAAOR,oBAAoB,CAACC,KAAD,CAA3B;AACH,OAFD,MAEOH,QAAQ,CAACU,OAAD,EAAU,IAAV,CAAR;;AACPK,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACA;;AACJ,SAAK,GAAL;AACIhB,MAAAA,QAAQ,CAACU,OAAD,EAAU,IAAV,CAAR;AACA;;AACJ,SAAK,GAAL;AACIV,MAAAA,QAAQ,CAAC,4GAAD,EAA+G,IAA/G,CAAR;AACA;;AACJ,SAAK,GAAL;AACIA,MAAAA,QAAQ,CAACU,OAAD,EAAU,IAAV,CAAR;AACA;;AACJ,SAAK,GAAL;AACIV,MAAAA,QAAQ,CAACU,OAAD,EAAU,IAAV,CAAR;AACA;;AACJ;AACI;AACA;AA9BR;;AAgCA,SAAOF,OAAO,CAACC,MAAR,CAAeN,KAAK,CAACQ,QAArB,CAAP;AACH","sourcesContent":["import axios from 'axios';\n//import Axios from '../../config';\n//import * as AuthActions from \"../../redux/actions/index\";\nimport { toastMsg } from '../utility';\nimport * as commonService from '../utility'\n\nconst handleAuthentication = async (error) => {\n    // const config = error.config;\n    // const token = storage.get(\"refresh_token\", null);\n    // Axios.defaults.headers.common[\"x-refreshtoken\"] = token;\n    // return await AuthActions.refreshToken().then(res => {\n    //     config.headers.Authorization = `Bearer ${res.token}`;\n    //     return Axios.request(config)\n    // });\n};\n\nexport default function errorHandler(error) {\n    commonService.isLoading.onNext(false);\n    if (axios.isCancel(error)) {\n        return Promise.reject(error);\n    }\n\n    if (error.message === \"Network Error\") {\n        toastMsg('Error connecting server. Please check your internet connection.', true);\n        return Promise.reject(error.message);\n    }\n\n    const message = error.response && error.response.data.error ? error.response.data.error.message : error.response.data.message ? error.response.data.message : 'Seems like something went wrong!';\n    switch (error.response.status) {\n        case 400:\n            if (message === \"jwt expired\") handleAuthentication(error);\n            else if (message && message.toLowerCase() === \"unauthorized\") {\n                // AuthActions.logout();\n                toastMsg(message, true);\n            } else {\n                toastMsg(message, true);\n            }\n            break;\n        case 401:\n            if (message === \"jwt expired\") {\n                return handleAuthentication(error);\n            } else toastMsg(message, true);\n            console.log('unauthorized, logging out ...');\n            break;\n        case 500:\n            toastMsg(message, true);\n            break;\n        case 504:\n            toastMsg('Sorry, could not access the external resource to refine the data for your request, please try again later!', true);\n            break;\n        case 700:\n            toastMsg(message, true);\n            break;\n        case 704:\n            toastMsg(message, true);\n            break;\n        default:\n            // toastMsg(message ? message : 'Something went wrong', true);\n            break;\n    }\n    return Promise.reject(error.response);\n}\n"]},"metadata":{},"sourceType":"module"}