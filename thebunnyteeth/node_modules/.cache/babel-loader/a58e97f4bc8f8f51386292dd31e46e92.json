{"ast":null,"code":"import thunkMiddleware from 'redux-thunk';\nimport loggerMiddleware from 'redux-logger';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport reducers from '../reducers/index';\nvar composeEnhancers;\n\nvar configureStore = function configureStore() {\n  var middlewares = [thunkMiddleware, promiseMiddleware];\n\n  if (process.env.NODE_ENV === 'production') {\n    composeEnhancers = compose(applyMiddleware.apply(void 0, middlewares));\n  } else {\n    middlewares.push(loggerMiddleware);\n    composeEnhancers = composeWithDevTools(applyMiddleware.apply(void 0, middlewares));\n  }\n\n  return createStore(reducers, composeEnhancers);\n};\n\nexport default configureStore();","map":{"version":3,"sources":["/home/bitcot/Desktop/my-repo/bunnyteeth/thebunnyteeth/src/redux/store/store.js"],"names":["thunkMiddleware","loggerMiddleware","promiseMiddleware","composeWithDevTools","createStore","compose","applyMiddleware","reducers","composeEnhancers","configureStore","middlewares","process","env","NODE_ENV","push"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,aAA5B;AACA,OAAOC,gBAAP,MAA6B,cAA7B;AACA,OAAOC,iBAAP,MAA8B,0BAA9B;AACA,SAAQC,mBAAR,QAAkC,0BAAlC;AACA,SAAQC,WAAR,EAAqBC,OAArB,EAA8BC,eAA9B,QAAoD,OAApD;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,IAAIC,gBAAJ;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AACzB,MAAIC,WAAW,GAAG,CAACV,eAAD,EAAkBE,iBAAlB,CAAlB;;AAEA,MAAIS,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA0C;AACtCL,IAAAA,gBAAgB,GAAGH,OAAO,CAACC,eAAe,MAAf,SAAmBI,WAAnB,CAAD,CAA1B;AACH,GAFD,MAEK;AACDA,IAAAA,WAAW,CAACI,IAAZ,CAAiBb,gBAAjB;AACAO,IAAAA,gBAAgB,GAAGL,mBAAmB,CAClCG,eAAe,MAAf,SAAmBI,WAAnB,CADkC,CAAtC;AAGH;;AACD,SAAON,WAAW,CAACG,QAAD,EAAWC,gBAAX,CAAlB;AACH,CAZD;;AAcA,eAAeC,cAAc,EAA7B","sourcesContent":["import thunkMiddleware from 'redux-thunk';\nimport loggerMiddleware from 'redux-logger';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport {composeWithDevTools} from 'redux-devtools-extension';\nimport {createStore, compose, applyMiddleware} from 'redux'\nimport reducers from '../reducers/index';\nlet composeEnhancers;\n\nconst configureStore = () => {\n    let middlewares = [thunkMiddleware, promiseMiddleware];\n\n    if (process.env.NODE_ENV === 'production'){\n        composeEnhancers = compose(applyMiddleware(...middlewares));\n    }else{\n        middlewares.push(loggerMiddleware);\n        composeEnhancers = composeWithDevTools(\n            applyMiddleware(...middlewares)\n        );\n    }\n    return createStore(reducers, composeEnhancers);\n}\n\nexport default configureStore();"]},"metadata":{},"sourceType":"module"}